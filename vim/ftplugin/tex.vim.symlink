" LaTeX specific settings

" map the localleader to use it in vimtex
let maplocalleader = ","

" mapping for opening this file in a new window
nnoremap <leader>tt :vne ~/dotfiles/vim/ftplugin/tex.vim.symlink \| setlocal nowrap<CR>

" mapping for sourcing this file
nnoremap <leader>ts :source ~/.vim/ftplugin/tex.vim<CR>

" map <leader>sh to show :Tshortcuts
" nnoremap <leader>sh :Tshortcuts<CR>

" change the Tex_Leader from ` to + to enable writing single quotes within `'
let g:Tex_Leader = "+"

""""""""""""""
" Appearance
""""""""""""""
" for faster scrolling:
setlocal lazyredraw
setlocal synmaxcol=128
syntax sync minlines=256

" Format lines to be up to 80 characters long
setlocal textwidth=80

" Set shiftwidth to 2
setlocal shiftwidth=2

" Set the tabstop to 2
setlocal tabstop=2

" in visual mode put \url{} around the selected text
vmap <leader>ur `>a}`<i\url{

if has("vim-latex-suite")
	" map <leader>cit to paste \autocite[<++>]{<++>}<++> and go inside the []
	call IMAP('CIP', '\autocite[<++>]{<++>}<++>', 'tex')
	nmap <leader>cip aCIP

	" map <leader>cip to paste \autocite[<++>]{<++>}<++> and go inside the []
	call IMAP('CIT', '\textcite[<++>]{<++>}<++>', 'tex')
	nmap <leader>cit aCIT
endif

" define expansion rule for autocite (expand "autocite" after pressing F7)
let g:Tex_Com_autocite = "\\autocite[<++>]{<++>}<++>"

" define expansion rule for autocite (expand "textcite" after pressing F7)
let g:Tex_Com_textcite = "\\textcite[<++>]{<++>}<++>"

"map <leader>cc to close the Errorwindow
nnoremap <leader>cc :ccl<CR>

" map dai to delete from the \item just before the cursor to the line just
" before the next \item
function! DeleteAnItem()
	:execute "normal! /\\($\\n\\s*\\|\\(^\\s*\\)\@<!\\\\item\\|^\\s*\\\\item\\)
				\\<CR>"
	:execute "normal! ?\\\\item\<CR>"
	:execute "normal! d/\\(^\\s*\\(\\\\end\\|\\\\begin\\){\\(enumerate\\|itemize\\|description\\|list\\|theindex\\|thebibliography\\|example\\)}\\|\\\\item\\|^?\\s*\\\\item\\)\<CR>"
endfunction
nnoremap dai :call DeleteAnItem()<CR>

" map vai to visually select from the \item just before the cursor to the line just
" before the next \item
function! SelectAnItem()
	:execute "normal! /\\($\\n\\s*\\|\\(^\\s*\\)\@<!\\\\item\\|^\\s*\\\\item\\)
				\\<CR>"
	:execute "normal! ?\\\\item\<CR>"
	:execute "normal! v/\\n\\(\\s*\\\\item\\|\\s*\\(\\\\end\\|\\\\begin\\){\\(enumerate\\|itemize\\|description\\|list\\|theindex\\|thebibliography\\|example\\)}\\)\<CR>"
endfunction
nnoremap vai :call SelectAnItem()<CR>

" make using the Alt+Key macros possible
setlocal winaltkeys=no

" ways to generate pdf files. there are soo many...
" NOTE: pdflatex generates the same output as latex. therefore quickfix is
"       possible.
let g:Tex_CompileRule_pdf = 'xelatex -interaction=nonstopmode -file-line-error-style $*'
let g:Tex_DefaultTargetFormat = 'pdf'


" This is because of vim-latex suite:
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
 
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'
