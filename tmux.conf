# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix
bind C-Space resize-pane -Z

# Use some vim-like keybindings
set-option -g mode-keys vi
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection
bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle

# Index windows and panes from 1
set-option -g base-index 1
set-option -g pane-base-index 1
set-window-option -g pane-base-index 1

# If a window is closed, renumber the remaining windows
set -g renumber-windows on

# Enable keycombinations like Ctrl+; to be correctly interpreted by programs, e.g., Neovim
set-option -g extended-keys on

# Make Prefix + 0 go to window number 10
bind 0 select-window -t :10
 
# Silence bell
set-option -g visual-bell off
 
# Shortcut to reload config
# Keeps me from having to exit and restart whenever I make a config change.
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf!"
 
# Bind Ctrl-q to display-pane
bind C-q display-pane

# Disable input and set custom style for a pane
bind-key i run "~/dotfiles/toggle_pane_input.sh #{pane_input_off}"

# Re-enable input and reset style to global values
bind-key e select-pane -e \; set-option -p -u window-style \; set-option -p -u window-active-style

# Up the history limit
set-option -g history-limit 1000000
 
# Vim style Movement commands
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R
 
# Pane resizing commands
bind -r H resize-pane -L 3
bind -r J resize-pane -D 3
bind -r K resize-pane -U 3
bind -r L resize-pane -R 3
 
# 256 colors, this gives me real trouble, and I'm still not sure
# it's right
set -g default-terminal 'tmux-256color'
set-option -ga terminal-overrides ',xterm-256color:Tc'

# alternative copy mode key "C-["
bind Escape copy-mode
 
# pass through xterm keys
set -g xterm-keys on
 
# monitor activity in windows
setw -g monitor-activity on
 
# highlight panes
set -g window-style 'fg=colour247,bg=colour233'
%if #{m:2.8,#{version}}
    set -g window-active-style 'fg=colour250,bg=black'
%else
    set -g window-active-style 'fg=colour250,bg=terminal'
    set -g cursor-style blinking-block
%endif

# Configure the status line:
set-option -g status-justify left
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-left-length 40
set-option -g status-right-length 100
 
set-option -g message-style fg=white
set-option -g message-style bg=red
 
setw -g window-status-style bg=black
setw -g window-status-current-style fg=red
 
# Set the display of the left and right regions
set -g status-left '#[bg=colour100]#[fg=black] #H: #[fg=black]#S#[fg=colour100] #[bg=black]#[default]'
set -g status-right '#[fg=colour100]#[bg=colour100] #[fg=black]%Y-%m-%d #[fg=blue]#[bg=blue]#[fg=black] %H:%M #[default]'

# smart pane switching with awareness of vim splits
# Doesn't work inside a terminal inside Neovim after running `psh` if Neovim wasn't not started in a
# poetry shell.
is_vim="ps -o state= -o comm= -t '#{?#{@active_tty},#{@active_tty},#{pane_tty}}' \
    | grep -iqE '^([^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?)$'"

bind -n M-h run "if [ #{pane_input_off} -eq 1 ] || ! $is_vim; then tmux select-pane -L; else tmux send-keys M-h; fi"
bind -n M-j run "if [ #{pane_input_off} -eq 1 ] || ! $is_vim; then tmux select-pane -D; else tmux send-keys M-j; fi"
bind -n M-k run "if [ #{pane_input_off} -eq 1 ] || ! $is_vim; then tmux select-pane -U; else tmux send-keys M-k; fi"
bind -n M-l run "if [ #{pane_input_off} -eq 1 ] || ! $is_vim; then tmux select-pane -R; else tmux send-keys M-l; fi"

# Move windows left and right
bind-key -n M-H previous-window
bind-key -n M-L next-window

# Create new window
bind-key -n M-N new-window

# Use tmux-sessionizer to create new sessions
bind-key -r g run-shell "tmux neww ~/.local/bin/tmux-sessionizer"

bind-key -r C-a run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/api"
bind-key -r C-s run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/feat_1"
bind-key -r C-d run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/feat_2"
bind-key -r C-f run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/feat_3"
bind-key -r C-g run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/feat_4"
bind-key -r C-h run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/feat_5"
bind-key -r C-e run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/speech-engine"
bind-key -r C-o run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/onboarding-api"
bind-key -r C-p run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/protofiles"
bind-key -r C-m run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/microservices"
bind-key -r C-t run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/datatools"
bind-key -r C-u run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/documentation"
bind-key -r C-\; run-shell "~/.local/bin/tmux-sessionizer ~/Gitlab/perf-tests"

bind-key -r C-j run-shell "~/.local/bin/tmux-sessionizer ~/dotfiles"
bind-key -r C-k run-shell "~/.local/bin/tmux-sessionizer ~/dotfiles/config/sway"
bind-key -r C-l run-shell "~/.local/bin/tmux-sessionizer ~/projects"
bind-key -r C-n run-shell "~/.local/bin/tmux-sessionizer ~/.config/nvim/lua/plugins"
bind-key -r C-y run-shell "~/.local/bin/tmux-sessionizer ~/.local/share/nvim/lazy"

bind-key -r C-^ if "test -n '#{client_last_session}'" "switch-client -l" "switch-client -p"

# Swap windows
bind-key -r -n M-< swap-window -t -1
bind-key -r -n M-> swap-window -t +1

# don't rename windows automatically
set-option -g allow-rename off

# Settings for the Tmux Plugin Manager
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'laktak/extrakto'

set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

# Undercurl
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# vim:set syntax=sh commentstring=#\ %s:
