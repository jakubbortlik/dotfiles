#!/usr/bin/env bash

commands=(add ls rm)
feature_worktrees="feat_1 feat_2 feat_3 feat_4 feat_5 feat1 feat2 feat3 feat4 feat5" 
toplevel=$(git rev-parse --show-toplevel)

post_add() {
  path=$1
  if [[ ! -d $path ]]; then 
    echo "Worktree path \"$path\" is not a directory"
  else
    if [ -r ".env" ]; then
      cp -v ".env" $path
    fi
    cd $path
    pyproject_toml=$(get_pyproject_toml)
    if [[ $pyproject_toml != "" ]]; then setup_pyenv $pyproject_toml && poetry install --sync; fi
    cd -
  fi
}

handle_dirty_worktree() {
  path=$1
  cd "$path" 2>/dev/null && git status || return
  echo -e "fatal: '$path' contains modified or untracked files\n"
  echo -e "\n################################### DIFF ###################################\n" &&  if [[ $(git status -s) =~ " M" ]]; then git diff; else git diff --cached; fi
  echo -e "\nUse 'wt rm f' to delete the worktree"
}

if [[ $# -eq 0 ]]; then
  git worktree list
  exit
elif [[ $# -eq 1 ]]; then
  command=$1
  arg=""
elif [[ $# -eq 2 ]]; then
  # Validate sub-command
  command=$1
  if [[ ! " ${commands[*]} " =~ \ ${command}\  ]]; then
    command=$(echo "${commands[@]}" | tr " " "\n" | fzf --header "'$1' is not a sub-command, choose another one")
  fi

  # Validate arguments
  arg=$2
  if [[ $command == "rm" ]]; then 
    if [[ ! $2 == "f" ]] && [[ ! $2 == "ff" ]]; then
      echo "Bad argument \"$2\" for command \"rm\". Acceptable values: \"f\", \"ff\"."
      exit
    fi
  elif [[ $command == "add" ]]; then 
    if [[ ! $2 == "mr" ]]; then
      echo "Bad argument \"$2\" for command \"add\". Acceptable values: \"mr\"."
      exit
    fi
  fi
else
  echo "Too many arguments."
  exit
fi

if [[ $command == "" ]]; then
  echo "No sub-command selected."
  exit
fi

if [[ $command == "rm" ]]; then
  selected=$(gw)
  if [[ $selected == "" ]]; then
    echo "No worktree selected."
    exit
  fi
  branch=$(git -C $selected rev-parse --abbrev-ref HEAD)
  root=$(git rev-parse --git-common-dir | xargs dirname)
  if [[ $arg == "f" ]]; then
    cd $root && git worktree remove --force "$selected" && echo "Force-removed worktree at $selected" && git branch -d $branch && echo "Removed branch $branch"
  elif [[ $arg == "ff" ]]; then
    cd $root && git worktree remove --force "$selected" && echo "Force-removed worktree at $selected" && git branch -D $branch && echo "Force-removed branch $branch"
  else
    cd $root && git worktree remove "$selected" 2>/dev/null && echo "Removed worktree at $selected" && git branch -d $branch || handle_dirty_worktree $selected $branch
  fi
elif [[ $command == "add" ]]; then
  existing_worktrees=$(ls "$toplevel/.." | \grep -- "^feat_\?[0-9]" | sort)
  available_worktrees=$(comm -23 <(echo "$feature_worktrees" | tr " " "\n" | sort) <(echo "$existing_worktrees") | sort -k 2n -tt)
  selected=$(echo "$available_worktrees" | fzf --header "Select a path for the new worktree")
  if [[ $selected == "" ]]; then
    echo "No path selected."
    exit
  fi
  if [[ $arg == "mr" ]]; then
    branch=$(gb "Select a branch or press Ctrl-C and choose a new branch name" "mr")
  else
    branch=$(gb "Select a branch or press Ctrl-C and choose a new branch name")
  fi
  if [[ $branch == "" ]]; then
    read -rp "Choose a new branch name: " branch
    branch="-b$branch"
  fi
  if [[ $branch == "" ]]; then
    echo "No branch selected."
    exit
  fi
  path="../$selected"
  git worktree add $path "$branch" && post_add $path && echo "New worktree created at $path"
elif [[ $command == "ls" ]]; then
  git worktree list
  exit
fi

exit
# vim:set ft=bash expandtab ts=2 sw=2:
